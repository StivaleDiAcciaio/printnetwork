# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

server {
	listen 80;
	server_name printnetworkPubblico;
	#redirect delle chiamate http verso https (https definito in fondo al file)
	return 301 https://$server_name$request_uri; 

	# Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
	#location /RequestDenied {
	#	proxy_pass http://127.0.0.1:8080;    
	#}

	#error_page 404 /404.html;

	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/html;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	#	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#	fastcgi_index index.php;
	#	include fastcgi_params;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}


# HTTPS server
#
server {
	listen 443;
	server_name printnetworkPubblico;

	root /var/www/public_html/PnFe;
	index index.html index.htm;

       	ssl on;
	ssl_certificate printnetwork.cert.pem;
	ssl_certificate_key printnetwork.key.pem;

	ssl_session_cache
	 shared:SSL:20m;
	ssl_session_timeout 180m;
        ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
        ssl_prefer_server_ciphers on;

	location / {
		try_files $uri $uri/ =404;
	}
	#questa configurazione inoltra le chiamate con url /printnetwork/apinode
	#verso il server backend che sta in ascolto sulla 3000 (server nodejs)
	#tramite la direttiva proxy_set_header effettuo forward dell'IP client remoto
	#verso il server backend in modo che possa rilevarlo
	#per questo Ã¨ stata impostata una variabile a scelta X-Forwarded-Proto
	location /printnetwork/apinode/ {
	        proxy_pass https://localhost:3000/apinode/;
        	#proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
		proxy_set_header X-Forwarded-Proto $remote_addr;
		proxy_pass_request_headers on;
		proxy_redirect http:// https://;
    	}
}
